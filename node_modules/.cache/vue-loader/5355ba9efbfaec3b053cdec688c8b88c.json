{"remainingRequest":"/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/src/views/curso/Tema2.vue?vue&type=template&id=5babe897&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/src/views/curso/Tema2.vue","mtime":1751509036496},{"path":"/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Introduccion_Educacion_Pedagogia/U1_Introduccion_Educacion_Pedagogia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}